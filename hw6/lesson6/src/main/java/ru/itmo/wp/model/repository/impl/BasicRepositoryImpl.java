package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.AbstractDomain;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;

public abstract class BasicRepositoryImpl<T extends AbstractDomain> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final String DATA_BASE_NAME;

    protected BasicRepositoryImpl(String data_base_name) {
        DATA_BASE_NAME = data_base_name;
    }

    public T find(long id) {
        return findByKey("id", id);
    }

    protected  <R> R executeSQLQuery(String template, List<Object> parameters, SQLLambda<R, PreparedStatement> operationable) {
        return executeSQLQuery(
                template,
                statement -> {
                    for (int i = 0; i < parameters.size(); i++) {
                        statement.setObject(i + 1, parameters.get(i));
                    }
                    return operationable.run(statement);
                }
        );
    }

    protected  <R> R executeSQLQuery(String template, SQLLambda<R, PreparedStatement> operationable) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(template, Statement.RETURN_GENERATED_KEYS)) {
                return operationable.run(statement);
            }
        } catch (SQLException e) {
            throw new RepositoryException(String.format("Can't find %s.", DATA_BASE_NAME), e);
        }
    }

    protected void save(Map<String, Object> parameters, T model) {
        //"INSERT INTO `User` (`login`, `email`, `passwordSha`, `creationTime`) VALUES (?, ?, ?, NOW())"
        StringBuilder template = new StringBuilder(String.format("INSERT INTO `%s` (", DATA_BASE_NAME));
        for (String key : parameters.keySet()) {
            template.append(String.format("`%s`, ", key));
        }
        template.append("`creationTime`) VALUES (")
                .append("?, ".repeat(parameters.size()))
                .append("NOW())");

        executeSQLQuery(
                template.toString(),
                new ArrayList<>(parameters.values()),
                statement -> {
                    if (statement.executeUpdate() != 1) {
                        throw new RepositoryException(String.format("Can't save %s.", DATA_BASE_NAME));
                    } else {
                        ResultSet generatedKeys = statement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            model.setId(generatedKeys.getLong(1));
                            model.setCreationTime(find(model.getId()).getCreationTime());
                        } else {
                            throw new RepositoryException(String.format("Can't save %s [no autogenerated fields].", DATA_BASE_NAME));
                        }
                    }
                    return null;
                });
    }

    public List<T> findAll() {
        return executeSQLQuery(
                String.format("SELECT * FROM %s ORDER BY id DESC", DATA_BASE_NAME),
                statement -> {
                    List<T> models = new ArrayList<>();
                        try (ResultSet resultSet = statement.executeQuery()) {
                            T model;
                            while ((model = toModel(statement.getMetaData(), resultSet)) != null) {
                                models.add(model);
                            }
                        }
                    return models;
                });
    }

    protected T findByKey(String key, Object val) {
        return executeSQLQuery(
                String.format("SELECT * FROM %s WHERE %s=?", DATA_BASE_NAME, key),
                Collections.singletonList(val),
                statement -> {
                    try (ResultSet resultSet = statement.executeQuery()) {
                        return toModel(statement.getMetaData(), resultSet);
                    }
                });
    }

    protected abstract T toModel(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    @FunctionalInterface
    protected interface SQLLambda<R, T> {
        R run(T t) throws SQLException;
    }
}
